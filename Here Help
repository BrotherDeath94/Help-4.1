#include <stdio.h>   // Include to use printf
#include <string.h>  // Include to use strcpy
#include <stdlib.h>  // Include to use malloc

struct list_item{ // Define Structure of List-Elements
    int id;
    char label[16];
    struct list_item* next;
};

struct list_item* front = NULL; // Pointer to Start of List
struct list_item* back = NULL;  // Pointer to End of List

int nextId = 1; // Globaler Zähler für die nächste ID


int appendItem(char* text){     // Add Element to List
    int nummer = nextId;
    struct list_item* item = malloc(sizeof(struct list_item));
    item->id = nummer;
    if(strlen(text) < 16){
        strcpy(item->label, text);
    } else{
        strncpy(item->label, text, 15);
        item->label[15] = '\0';
    }
    if(front == NULL){
        front = item;
    } 
    if(back == NULL){
        back = item;
    } else {
        back->next = item;
        back = item;
    }
    nextId++;
    return nummer;
}

void printList(){       //Print List 
    if(front != NULL){
        struct list_item* item = front;
        while(item != NULL){
            printf("%d: %s\n", item->id, item->label);
            item = item->next;
        }
        printf("\n");
    } else {
        printf("empty\n\n");
    }
    return;
}

struct list_item* findItem(int lid){ // Seek Element in List.
    if(front != NULL){
        struct list_item* lost = front;
        while(lost != NULL){
            if(lost->id == lid){
                return lost;
            } else { 
                lost = lost->next;
            }
        }
        return NULL;
    } else {
        return NULL; 
    }
}

void deleteItem(int did){           // Delete Element in List
    if(findItem(did) == front){     // Element to delete is Front Element
        struct list_item* delete = front;
        front = front->next;
        free(delete);
        return;
    } else {                        // Element to delete isn't Front Element
        
        if(findItem(did) != NULL){
            struct list_item* delete = findItem(did);
            struct list_item* tempdelete = front;
            
            while(tempdelete->next != delete){
                tempdelete = tempdelete->next;
            }
            if(delete != back){
               tempdelete->next = delete->next; 
            } else {
                back = tempdelete;
            }
            free(delete);
            return;
        }
    }
    return;
}

void deleteList(){                  // Delete List
    if(front != NULL){
    while(front->next != NULL){
    struct list_item* delete = front;
    front = front->next;
    free(delete);
    }
    struct list_item* delete = front;
    free(delete);
    }
    return;
}

void printItem(struct list_item* item){ // Print Single Item
    if(item != NULL){
        printf("%s" , item->label);
        
    } else {
        printf("NULL");
    }
    printf("\n");
    return;
}


int main()
{
	int id1 = appendItem("item_1");
int id2 = appendItem("item_2");
int id3 = appendItem("item_3");

printItem(findItem(id1));
printItem(findItem(id2));
printItem(findItem(id3));
printf("\n");

deleteList();

printItem(findItem(id1));
printItem(findItem(id2));
printItem(findItem(id3));
printf("\n");

int id4 = appendItem("item_4");
int id5 = appendItem("item_5");
int id6 = appendItem("item_6");


printItem(findItem(id4));
printItem(findItem(id5));
printItem(findItem(id6));
printf("\n");

deleteList();

printItem(findItem(id1));
printItem(findItem(id2));
printItem(findItem(id3));
printItem(findItem(id4));
printItem(findItem(id5));
printItem(findItem(id6));
printf("\n");

	return 0;
}


}

